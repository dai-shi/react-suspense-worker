{"version":3,"file":"index.umd.js","sources":["../src/wrap.ts","../src/expose.ts"],"sourcesContent":["import { wrap as comlinkWrap, Endpoint } from 'comlink';\n\nconst isPromise = (x: unknown): x is Promise<unknown> => (\n  !!x && typeof (x as Promise<unknown>).then === 'function'\n);\n\nconst isObject = (x: unknown): x is object => typeof x === 'object' && x !== null;\n\nconst createProxy = (remote: any): any => {\n  const cacheForGet = new Map();\n  const cacheForApply = new Map();\n  return new Proxy(remote, {\n    get(target, key) {\n      if (cacheForGet.has(key)) {\n        const result = cacheForGet.get(key);\n        // cacheForGet.delete(key);\n        if (isObject(result)) {\n          return createProxy(result);\n        }\n        return result;\n      }\n      const result = target[key];\n      if (isPromise(result)) {\n        throw result.then((r) => { cacheForGet.set(key, r); });\n      }\n      if (isObject(result)) {\n        return createProxy(result);\n      }\n      return result;\n    },\n    apply(target, thisArg, args) {\n      const key = JSON.stringify(args); // hoping args is small and stringify is fast\n      if (cacheForApply.has(key)) {\n        const result = cacheForApply.get(key);\n        // cacheForApply.delete(key);\n        if (isObject(result)) {\n          return createProxy(result);\n        }\n        return result;\n      }\n      const result = target.apply(thisArg, args);\n      if (isPromise(result)) {\n        throw result.then((r) => { cacheForApply.set(key, r); });\n      }\n      if (isObject(result)) {\n        return createProxy(result);\n      }\n      return result;\n    },\n  });\n};\n\n/**\n * Wrap a worker to be used with React Suspense\n *\n * @example\n * import { wrap } from 'react-suspense-worker';\n *\n * const fib = wrap(new Worker('./slow_fib.worker', { type: 'module' }));\n *\n * const DisplayFib = ({ number }) => {\n *   const result = fib(number);\n *   return <div>result: {result}</div>;\n * };\n */\nexport const wrap = <T>(ep: Endpoint): T => {\n  const remote = comlinkWrap<T>(ep);\n  const proxy = createProxy(remote);\n  return proxy as T;\n};\n","import { expose as comlinkExpose } from 'comlink';\n\n/**\n * Expose a value in worker thread to be wrapped in main thread\n *\n * @example\n * import { expose } from 'react-suspense-worker';\n *\n * const fib = (i) => (i <= 1 ? i : fib(i - 1) + fib(i - 2));\n *\n * expose(fib);\n */\nexport const expose = comlinkExpose;\n"],"names":["isPromise","x","then","isObject","comlinkExpose","ep","createProxy","remote","cacheForGet","Map","cacheForApply","Proxy","get","target","key","has","result","r","set","apply","thisArg","args","JSON","stringify","comlinkWrap"],"mappings":"gPAEMA,EAAY,SAACC,WACfA,GAA6C,mBAAhCA,EAAuBC,MAGlCC,EAAW,SAACF,SAAyC,iBAANA,GAAwB,OAANA,YCMjDG,gBDqDF,SAAIC,GAGtB,OA5DkB,SAAdC,EAAeC,GACnB,IAAMC,EAAc,IAAIC,IAClBC,EAAgB,IAAID,IAC1B,WAAWE,MAAMJ,EAAQ,CACvBK,aAAIC,EAAQC,GACV,GAAIN,EAAYO,IAAID,GAAM,CACxB,IAAME,EAASR,EAAYI,IAAIE,GAE/B,OAAIX,EAASa,GACJV,EAAYU,GAEdA,EAET,IAAMA,EAASH,EAAOC,GACtB,GAAId,EAAUgB,GACZ,MAAMA,EAAOd,KAAK,SAACe,GAAQT,EAAYU,IAAIJ,EAAKG,KAElD,OAAId,EAASa,GACJV,EAAYU,GAEdA,GAETG,eAAMN,EAAQO,EAASC,GACrB,IAAMP,EAAMQ,KAAKC,UAAUF,GAC3B,GAAIX,EAAcK,IAAID,GAAM,CAC1B,IAAME,EAASN,EAAcE,IAAIE,GAEjC,OAAIX,EAASa,GACJV,EAAYU,GAEdA,EAET,IAAMA,EAASH,EAAOM,MAAMC,EAASC,GACrC,GAAIrB,EAAUgB,GACZ,MAAMA,EAAOd,KAAK,SAACe,GAAQP,EAAcQ,IAAIJ,EAAKG,KAEpD,OAAId,EAASa,GACJV,EAAYU,GAEdA,KAoBGV,CADCkB,OAAenB"}